lut 23, 2020 6:17:43 PM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful


lut 23, 2020 6:17:55 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: java.lang.Exception: asd- MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()[spring.security.loginandregtemplate.restController.UserController.getAllU(UserController.java:64), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$33b9a6c7.getAllU(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898), javax.servlet.http.HttpServlet.service(HttpServlet.java:634), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 23, 2020 6:19:33 PM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 23, 2020 6:19:34 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 23, 2020 6:19:34 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1b12ed61
lut 23, 2020 6:20:24 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:20:24 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:20:25 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:20:25 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:20:26 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:20:26 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:20:26 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:20:26 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:23:51 PM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 23, 2020 6:23:52 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 23, 2020 6:23:52 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@5f52f6e6
lut 23, 2020 6:24:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:24:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:24:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:52 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:24:52 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:24:52 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:52 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:53 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:24:53 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:24:53 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:53 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:53 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:24:53 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:24:53 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:53 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:55 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:24:55 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:24:55 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:55 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:59 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:24:59 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:24:59 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:24:59 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:05 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:05 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:05 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:05 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:06 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:06 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:06 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:06 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:07 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:07 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:07 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:07 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:07 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:07 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:07 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:07 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:08 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:08 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:08 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:08 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:08 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:08 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:08 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:08 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:09 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:10 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:10 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:10 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:10 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:11 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:11 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:11 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:11 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:11 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:11 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:11 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:11 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:12 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:16 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:25:16 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:25:16 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:16 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:17 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:25:17 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:25:17 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:17 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:17 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:25:17 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:25:17 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:17 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:18 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:25:18 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:25:18 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:18 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:18 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:25:18 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:25:18 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:18 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:19 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:25:19 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:25:19 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:19 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:19 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 23, 2020 6:25:19 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 23, 2020 6:25:19 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:19 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 23, 2020 6:25:38 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [1]
lut 23, 2020 6:25:38 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [1]
lut 23, 2020 6:25:38 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [1]
lut 23, 2020 6:25:38 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 23, 2020 6:25:38 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 23, 2020 6:25:38 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=1, username=Vattier, email=piasek, password=eee}}}
lut 23, 2020 6:25:45 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [1]
lut 23, 2020 6:25:45 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [1]
lut 23, 2020 6:25:45 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [1]
lut 23, 2020 6:25:45 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 23, 2020 6:25:45 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 23, 2020 6:25:45 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=1, username=Vattier, email=piasek, password=eee}}}
lut 23, 2020 6:25:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [1]
lut 23, 2020 6:25:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [1]
lut 23, 2020 6:25:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [1]
lut 23, 2020 6:25:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 23, 2020 6:25:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 23, 2020 6:25:46 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=1, username=Vattier, email=piasek, password=eee}}}
lut 23, 2020 6:25:47 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [1]
lut 23, 2020 6:25:47 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [1]
lut 23, 2020 6:25:47 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [1]
lut 23, 2020 6:25:47 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 23, 2020 6:25:47 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 23, 2020 6:25:47 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=1, username=Vattier, email=piasek, password=eee}}}
lut 24, 2020 9:22:20 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 9:22:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 9:22:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@4106b27d
lut 24, 2020 9:22:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [1]
lut 24, 2020 9:22:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [1]
lut 24, 2020 9:22:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [1]
lut 24, 2020 9:22:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 24, 2020 9:22:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 24, 2020 9:22:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=1, username=Vattier, email=piasek, password=eee}}}
lut 24, 2020 9:22:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [1]
lut 24, 2020 9:22:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [1]
lut 24, 2020 9:22:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [1]
lut 24, 2020 9:22:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 24, 2020 9:22:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 24, 2020 9:22:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=1, username=Vattier, email=piasek, password=eee}}}
lut 24, 2020 9:22:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:22:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:22:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 9:22:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 9:22:57 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 24, 2020 9:22:57 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 24, 2020 9:22:57 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 9:22:57 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 9:23:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:23:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:23:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 9:23:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 9:24:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)
			calling with args: [{email=piasek, password=eee, enabled=false, userName=Vattier}, SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@cd04556]]
lut 24, 2020 9:24:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: java.lang.NullPointerException- MethodMap spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)[org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:222), org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:212), graphql.parser.Parser.parseDocument(Parser.java:28), graphql.parser.Parser.parseDocument(Parser.java:21), graphql.GraphQL.parse(GraphQL.java:544), graphql.GraphQL.parseAndValidate(GraphQL.java:520), graphql.GraphQL.lambda$parseValidateAndExecute$4(GraphQL.java:509), graphql.execution.preparsed.NoOpPreparsedDocumentProvider.get(NoOpPreparsedDocumentProvider.java:11), graphql.GraphQL.parseValidateAndExecute(GraphQL.java:505), graphql.GraphQL.executeAsync(GraphQL.java:489), graphql.GraphQL.execute(GraphQL.java:420), spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(UserController.java:46), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$5cf95b97.indexFromAnnotated(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909), javax.servlet.http.HttpServlet.service(HttpServlet.java:660), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 9:25:58 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 9:25:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 9:25:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@181b611
lut 24, 2020 9:26:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [title]
lut 24, 2020 9:26:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'title' in type 'User' is undefined @ 'all/title', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:26:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [email]
lut 24, 2020 9:26:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:26:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 9:26:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={all=[{email=piasek}]}}
lut 24, 2020 9:27:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [email]
lut 24, 2020 9:27:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:27:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:27:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={all=[{email=piasek}, {email=piotrek}]}}
lut 24, 2020 9:27:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [email]
lut 24, 2020 9:27:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:27:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:27:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={all=[{email=piasek}, {email=piotrek}]}}
lut 24, 2020 9:27:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [email]
lut 24, 2020 9:27:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:27:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:27:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={all=[{email=piasek}, {email=piotrek}]}}
lut 24, 2020 9:28:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 9:28:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [2]
lut 24, 2020 9:28:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [2]
lut 24, 2020 9:28:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 9:28:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 9:28:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=2, username=vat, email=piotrek, password=aaa}}}
lut 24, 2020 9:28:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:28:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:28:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:28:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:28:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAllU()
			calling with args: []
lut 24, 2020 9:28:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			calling with args: []
lut 24, 2020 9:28:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.fetchAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:28:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAllU()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:29:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)
			calling with args: [{email=piotrek, password=aaa, roles=null, enabled=false, userName=vat}, SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@61fb7eea]]
lut 24, 2020 9:29:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: java.lang.NullPointerException- MethodMap spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)[org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:222), org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:212), graphql.parser.Parser.parseDocument(Parser.java:28), graphql.parser.Parser.parseDocument(Parser.java:21), graphql.GraphQL.parse(GraphQL.java:544), graphql.GraphQL.parseAndValidate(GraphQL.java:520), graphql.GraphQL.lambda$parseValidateAndExecute$4(GraphQL.java:509), graphql.execution.preparsed.NoOpPreparsedDocumentProvider.get(NoOpPreparsedDocumentProvider.java:11), graphql.GraphQL.parseValidateAndExecute(GraphQL.java:505), graphql.GraphQL.executeAsync(GraphQL.java:489), graphql.GraphQL.execute(GraphQL.java:420), spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(UserController.java:46), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$ea54d83a.indexFromAnnotated(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909), javax.servlet.http.HttpServlet.service(HttpServlet.java:660), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 9:29:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)
			calling with args: [{email=piotrek, password=aaa, enabled=false, userName=vat}, SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@42de537d]]
lut 24, 2020 9:29:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: java.lang.NullPointerException- MethodMap spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)[org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:222), org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:212), graphql.parser.Parser.parseDocument(Parser.java:28), graphql.parser.Parser.parseDocument(Parser.java:21), graphql.GraphQL.parse(GraphQL.java:544), graphql.GraphQL.parseAndValidate(GraphQL.java:520), graphql.GraphQL.lambda$parseValidateAndExecute$4(GraphQL.java:509), graphql.execution.preparsed.NoOpPreparsedDocumentProvider.get(NoOpPreparsedDocumentProvider.java:11), graphql.GraphQL.parseValidateAndExecute(GraphQL.java:505), graphql.GraphQL.executeAsync(GraphQL.java:489), graphql.GraphQL.execute(GraphQL.java:420), spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(UserController.java:46), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$ea54d83a.indexFromAnnotated(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909), javax.servlet.http.HttpServlet.service(HttpServlet.java:660), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 9:30:25 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 9:30:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 9:30:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@188c5506
lut 24, 2020 9:31:25 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 9:31:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 9:31:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@34fe3593
lut 24, 2020 9:32:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)
			calling with args: [{email=piotrek, password=aaa, userName=vat}, SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@79baa43e]]
lut 24, 2020 9:32:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: java.lang.NullPointerException- MethodMap spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)[org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:222), org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:212), graphql.parser.Parser.parseDocument(Parser.java:28), graphql.parser.Parser.parseDocument(Parser.java:21), graphql.GraphQL.parse(GraphQL.java:544), graphql.GraphQL.parseAndValidate(GraphQL.java:520), graphql.GraphQL.lambda$parseValidateAndExecute$4(GraphQL.java:509), graphql.execution.preparsed.NoOpPreparsedDocumentProvider.get(NoOpPreparsedDocumentProvider.java:11), graphql.GraphQL.parseValidateAndExecute(GraphQL.java:505), graphql.GraphQL.executeAsync(GraphQL.java:489), graphql.GraphQL.execute(GraphQL.java:420), spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(UserController.java:46), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$86778e95.indexFromAnnotated(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909), javax.servlet.http.HttpServlet.service(HttpServlet.java:660), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 9:51:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:51:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:51:36 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:51:36 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:52:18 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 9:52:18 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 9:52:18 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@15a0e83f
lut 24, 2020 9:52:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:52:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:52:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:52:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:31 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:31 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:31 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:31 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:47 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:53:47 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:47 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:47 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [e]
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'e' in type 'User' is undefined @ 'all/e', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [em]
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [ema]
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [em]
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'ema' in type 'User' is undefined @ 'all/ema', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'em' in type 'User' is undefined @ 'all/em', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'em' in type 'User' is undefined @ 'all/em', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [ema]
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [emai]
lut 24, 2020 9:53:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [ema]
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'ema' in type 'User' is undefined @ 'all/ema', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'ema' in type 'User' is undefined @ 'all/ema', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'emai' in type 'User' is undefined @ 'all/emai', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [emai]
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [email]
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'emai' in type 'User' is undefined @ 'all/emai', locations=[{line=1, column=10}]}]}
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:53:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={all=[{email=piasek}, {email=piotrek}]}}
lut 24, 2020 9:54:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:54:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:54:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:54:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:54:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 9:54:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 9:54:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:54:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 9:54:03 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 9:54:03 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 9:54:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 9:54:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 9:54:18 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 9:54:18 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:06:07 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:06:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:06:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@d0f4c1f
lut 24, 2020 10:06:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:06:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:06:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:06:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:08:11 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:08:11 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:08:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:08:28 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:08:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:08:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:08:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:08:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:09:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:09:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:09:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:09:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:09:15 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:09:15 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:09:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:09:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:09:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:09:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:09:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:09:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:09:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:09:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:09:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:09:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:09:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:09:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:09:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:09:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:09:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:09:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:09:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:09:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:11 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:11:11 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:11:11 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:11 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:11:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:11:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:20 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:11:20 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:11:20 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:20 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:20 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:11:20 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:11:20 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:20 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:11:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:11:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:11:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:23:45 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:23:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:23:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@110bddcf
lut 24, 2020 10:23:59 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			calling with args: []
lut 24, 2020 10:24:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [null]
lut 24, 2020 10:24:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [null]
lut 24, 2020 10:24:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!- MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)[org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:374), org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:257), org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:528), org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61), org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:178), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy124.getOne(Unknown Source), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344), org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy124.getOne(Unknown Source), spring.security.loginandregtemplate.service.UserServiceImpl.getUser(UserServiceImpl.java:38), spring.security.loginandregtemplate.service.UserServiceImpl$$FastClassBySpringCGLIB$$a6978e76.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.service.UserServiceImpl$$EnhancerBySpringCGLIB$$e8e9b150.getUser(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), io.leangen.graphql.metadata.execution.SingletonMethodInvoker.execute(SingletonMethodInvoker.java:21), io.leangen.graphql.metadata.Resolver.resolve(Resolver.java:100), io.leangen.graphql.execution.OperationExecutor.lambda$execute$1(OperationExecutor.java:93), io.leangen.graphql.execution.OperationExecutor.execute(OperationExecutor.java:98), io.leangen.graphql.execution.OperationExecutor.execute(OperationExecutor.java:94), io.leangen.graphql.execution.OperationExecutor.execute(OperationExecutor.java:59), graphql.execution.ExecutionStrategy.fetchField(ExecutionStrategy.java:261), graphql.execution.ExecutionStrategy.resolveFieldWithInfo(ExecutionStrategy.java:202), graphql.execution.AsyncExecutionStrategy.execute(AsyncExecutionStrategy.java:70), graphql.execution.Execution.executeOperation(Execution.java:159), graphql.execution.Execution.execute(Execution.java:101), graphql.GraphQL.execute(GraphQL.java:573), graphql.GraphQL.parseValidateAndExecute(GraphQL.java:515), graphql.GraphQL.executeAsync(GraphQL.java:489), graphql.GraphQL.execute(GraphQL.java:420), graphql.GraphQL.execute(GraphQL.java:291), spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail(UserController.java:69), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$90a220ac.getAllUsersByEmail(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898), javax.servlet.http.HttpServlet.service(HttpServlet.java:634), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 10:24:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!- MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)[org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:374), org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:257), org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:528), org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61), org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:178), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy124.getOne(Unknown Source), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344), org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy124.getOne(Unknown Source), spring.security.loginandregtemplate.service.UserServiceImpl.getUser(UserServiceImpl.java:38), spring.security.loginandregtemplate.service.UserServiceImpl$$FastClassBySpringCGLIB$$a6978e76.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.service.UserServiceImpl$$EnhancerBySpringCGLIB$$e8e9b150.getUser(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), io.leangen.graphql.metadata.execution.SingletonMethodInvoker.execute(SingletonMethodInvoker.java:21), io.leangen.graphql.metadata.Resolver.resolve(Resolver.java:100), io.leangen.graphql.execution.OperationExecutor.lambda$execute$1(OperationExecutor.java:93), io.leangen.graphql.execution.OperationExecutor.execute(OperationExecutor.java:98), io.leangen.graphql.execution.OperationExecutor.execute(OperationExecutor.java:94), io.leangen.graphql.execution.OperationExecutor.execute(OperationExecutor.java:59), graphql.execution.ExecutionStrategy.fetchField(ExecutionStrategy.java:261), graphql.execution.ExecutionStrategy.resolveFieldWithInfo(ExecutionStrategy.java:202), graphql.execution.AsyncExecutionStrategy.execute(AsyncExecutionStrategy.java:70), graphql.execution.Execution.executeOperation(Execution.java:159), graphql.execution.Execution.execute(Execution.java:101), graphql.GraphQL.execute(GraphQL.java:573), graphql.GraphQL.parseValidateAndExecute(GraphQL.java:515), graphql.GraphQL.executeAsync(GraphQL.java:489), graphql.GraphQL.execute(GraphQL.java:420), graphql.GraphQL.execute(GraphQL.java:291), spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail(UserController.java:69), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$90a220ac.getAllUsersByEmail(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898), javax.servlet.http.HttpServlet.service(HttpServlet.java:634), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 10:24:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			successfully returned Object: {data={user=null}, errors=[{message=Exception while fetching data (/user) : The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!, locations=[{line=1, column=3}], path=[user]}]}
lut 24, 2020 10:24:50 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:24:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:24:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@2b796d09
lut 24, 2020 10:24:55 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			calling with args: []
lut 24, 2020 10:24:55 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'users' in type 'Query' is undefined @ 'users', locations=[{line=1, column=3}]}]}
lut 24, 2020 10:25:45 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:25:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:25:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@5d1bfbc8
lut 24, 2020 10:25:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			calling with args: []
lut 24, 2020 10:25:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:25:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:25:51 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			successfully returned Object: {data={all=[{email=piasek}, {email=piotrek}]}}
lut 24, 2020 10:29:26 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:29:26 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:29:26 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@19b76953
lut 24, 2020 10:29:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [users]
lut 24, 2020 10:29:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'users' in type 'User' is undefined @ 'users/users', locations=[{line=1, column=12}]}]}
lut 24, 2020 10:30:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			calling with args: []
lut 24, 2020 10:30:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:30:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:30:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			successfully returned Object: {data={users=[{email=piasek}, {email=piotrek}]}}
lut 24, 2020 10:30:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [id]
lut 24, 2020 10:30:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:30:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:30:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={users=[{id=1}, {id=2}]}}
lut 24, 2020 10:30:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [password]
lut 24, 2020 10:30:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:30:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:30:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={users=[{password=eee}, {password=aaa}]}}
lut 24, 2020 10:30:43 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:30:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:30:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1c1c1e79
lut 24, 2020 10:30:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [password]
lut 24, 2020 10:30:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:30:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:30:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={users=[{password=eee}, {password=aaa}]}}
lut 24, 2020 10:30:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [password]
lut 24, 2020 10:30:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:30:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:30:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={users=[{password=eee}, {password=aaa}]}}
lut 24, 2020 10:31:08 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:31:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:31:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@64d98f99
lut 24, 2020 10:31:17 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [password]
lut 24, 2020 10:31:17 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:31:17 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:31:17 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={users=[{password=eee}, {password=aaa}]}}
lut 24, 2020 10:31:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:31:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:31:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:31:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:31:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [password]
lut 24, 2020 10:31:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:31:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:31:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {data={users=[{password=eee}, {password=aaa}]}}
lut 24, 2020 10:33:29 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:33:29 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:33:29 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@6b9ea9ff
lut 24, 2020 10:33:33 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [password]
lut 24, 2020 10:33:33 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully ended
lut 24, 2020 10:33:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [roles]
lut 24, 2020 10:33:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'roles' in type 'User' is undefined @ 'users/roles', locations=[{line=1, column=12}]}]}
lut 24, 2020 10:33:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [role]
lut 24, 2020 10:33:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type SubSelectionRequired: Sub selection required for type null of field role @ 'users/role', locations=[{line=1, column=12}]}]}
lut 24, 2020 10:33:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [role]
lut 24, 2020 10:33:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type SubSelectionRequired: Sub selection required for type null of field role @ 'users/role', locations=[{line=1, column=12}]}]}
lut 24, 2020 10:33:53 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [user]
lut 24, 2020 10:33:53 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'user' in type 'User' is undefined @ 'users/user', locations=[{line=1, column=12}]}]}
lut 24, 2020 10:33:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAll(String)
			calling with args: [users]
lut 24, 2020 10:33:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAll(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'users' in type 'User' is undefined @ 'users/users', locations=[{line=1, column=12}]}]}
lut 24, 2020 10:33:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:33:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:33:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:33:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			calling with args: []
lut 24, 2020 10:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getAllUsersByEmail()
			successfully returned Object: {data={users=[{email=piasek}, {email=piotrek}]}}
lut 24, 2020 10:35:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [1]
lut 24, 2020 10:35:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [1]
lut 24, 2020 10:35:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [1]
lut 24, 2020 10:35:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 24, 2020 10:35:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 24, 2020 10:35:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=1, username=Vattier, email=piasek, password=eee}}}
lut 24, 2020 10:35:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:35:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [2]
lut 24, 2020 10:35:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [2]
lut 24, 2020 10:35:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 10:35:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 10:35:48 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=2, username=vat, email=piotrek, password=aaa}}}
lut 24, 2020 10:38:38 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:38:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:38:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@252f6ae0
lut 24, 2020 10:38:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.restController.UserController.getDes(Long)
			calling with args: [2]
lut 24, 2020 10:38:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [2]
lut 24, 2020 10:38:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [2]
lut 24, 2020 10:38:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 10:38:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 10:38:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.restController.UserController.getDes(Long)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 10:39:39 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:39:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:39:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1317efe8
lut 24, 2020 10:39:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:39:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {errors=[{message=Validation error of type SubSelectionRequired: Sub selection required for type User of field user @ 'user', locations=[{line=1, column=3}]}]}
lut 24, 2020 10:40:01 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:40:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:40:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@62fc9a61
lut 24, 2020 10:40:03 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:40:03 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {errors=[{message=Invalid Syntax, locations=[{line=1, column=15}]}]}
lut 24, 2020 10:40:14 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:40:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:40:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@14be2319
lut 24, 2020 10:40:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:40:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {errors=[{message=Invalid Syntax, locations=[{line=1, column=14}]}]}
lut 24, 2020 10:40:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:40:40 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {errors=[{message=Invalid Syntax, locations=[{line=1, column=14}]}]}
lut 24, 2020 10:41:00 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:41:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:41:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@eb136ec
lut 24, 2020 10:41:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:41:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {errors=[{message=Validation error of type SubSelectionRequired: Sub selection required for type null of field role @ 'user/role', locations=[{line=1, column=34}]}]}
lut 24, 2020 10:41:39 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:41:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:41:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3be13597
lut 24, 2020 10:42:03 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:42:03 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'roles' in type 'User' is undefined @ 'user/roles', locations=[{line=1, column=34}]}]}
lut 24, 2020 10:42:15 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:42:15 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:42:15 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@148f2424
lut 24, 2020 10:42:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:42:58 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {errors=[{message=Validation error of type SubSelectionRequired: Sub selection required for type null of field role @ 'user/role', locations=[{line=1, column=34}]}]}
lut 24, 2020 10:43:06 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:43:06 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:43:06 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:43:06 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:43:24 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:43:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:43:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1a3927c4
lut 24, 2020 10:43:37 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:43:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:43:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@24dddf95
lut 24, 2020 10:44:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:44:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:44:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:44:12 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:44:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:44:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {errors=[{message=Validation error of type FieldUndefined: Field 'roles' in type 'User' is undefined @ 'user/roles', locations=[{line=1, column=34}]}]}
lut 24, 2020 10:46:49 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:46:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:46:50 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@7f6b9b73
lut 24, 2020 10:47:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [2]
lut 24, 2020 10:47:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [2]
lut 24, 2020 10:47:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [2]
lut 24, 2020 10:47:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 10:47:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}
lut 24, 2020 10:47:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=2, email=piotrek, username=vat, role=[]}}}
lut 24, 2020 10:47:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.getDes(String)
			calling with args: [1]
lut 24, 2020 10:47:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method User spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			calling with args: [1]
lut 24, 2020 10:47:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			calling with args: [1]
lut 24, 2020 10:47:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.jpa.repository.JpaRepository.getOne(Object)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 24, 2020 10:47:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUser spring.security.loginandregtemplate.service.UserServiceImpl.getUser(Long)
			successfully returned Object: User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}
lut 24, 2020 10:47:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodMap spring.security.loginandregtemplate.restController.UserController.getDes(String)
			successfully returned Object: {data={user={id=1, email=piasek, username=Vattier, role=[{name=ADMIN}]}}}
lut 24, 2020 10:48:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:48:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:48:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:48:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:49:06 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:49:06 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:49:06 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:49:06 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:49:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:49:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:49:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:49:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:49:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:49:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:49:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:49:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:49:11 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:49:11 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:50:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:50:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:50:36 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:50:36 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:51:16 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 10:51:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 10:51:16 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@7a206bb4
lut 24, 2020 10:53:18 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.MainController.getHome()
			calling with args: []
lut 24, 2020 10:53:18 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.MainController.getHome()
			successfully returned Object: index
lut 24, 2020 10:53:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:21 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:23 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 10:53:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 10:53:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 10:53:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=1, username='Vattier', email='piasek', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}, User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 11:00:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.restController.HomeResources.helloUser()
			calling with args: []
lut 24, 2020 11:00:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.restController.HomeResources.helloUser()
			successfully returned Object: user
lut 24, 2020 11:01:05 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			calling with args: []
lut 24, 2020 11:01:05 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			successfully ended
lut 24, 2020 11:01:37 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:01:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:01:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@2c7dbac8
lut 24, 2020 11:03:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.getHome()
			calling with args: []
lut 24, 2020 11:03:38 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.getHome()
			successfully returned Object: index
lut 24, 2020 11:03:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:03:42 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:04:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:04:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:04:52 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:04:52 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:04:52 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1b3d231e
lut 24, 2020 11:04:59 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:04:59 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:04:59 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='vattier', email='vattier', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:04:59 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@3154ee83
lut 24, 2020 11:05:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@530da222], {}]
lut 24, 2020 11:05:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:05:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:05:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:05:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='vattier', email='vattier', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:05:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@4b6690f0
lut 24, 2020 11:05:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@7a867c52], {}]
lut 24, 2020 11:05:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:05:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:05:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:05:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:05:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:05:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='vattier', email='vattier', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:05:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@67a91cad
lut 24, 2020 11:05:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@4c98d4d3], {}]
lut 24, 2020 11:05:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:05:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:05:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:05:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='vattier', email='vattier', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:05:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@3e9cb3dd
lut 24, 2020 11:05:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@3c0eec5b], {}]
lut 24, 2020 11:05:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:06:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:06:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [vattier]
lut 24, 2020 11:06:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='vattier', email='vattier', password='eee', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:06:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@43336a09
lut 24, 2020 11:06:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@13abba71], {}]
lut 24, 2020 11:06:00 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:06:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [vat]
lut 24, 2020 11:06:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [vat]
lut 24, 2020 11:06:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=2, username='vat', email='piotrek', password='aaa', isEnabled=false, roles=[]}]
lut 24, 2020 11:06:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@35d5666f
lut 24, 2020 11:06:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@4e3b3b5a], {}]
lut 24, 2020 11:06:13 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:08:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [eee]
lut 24, 2020 11:08:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [eee]
lut 24, 2020 11:08:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='eee', email='vattier', password='{bcrypt}$2a$10$ZUDSOBw111fPxMe.XdHW/.x.fhP57DbzWWbja71OSpVHuIf5mEz6G', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:08:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@6a86071b
lut 24, 2020 11:08:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@6688c765], {}]
lut 24, 2020 11:08:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:08:33 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@4087bdd9], {}]
lut 24, 2020 11:08:33 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:08:34 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:08:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:08:35 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:08:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:08:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:08:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='admin', email='vattier', password='{bcrypt}$2a$10$ZUDSOBw111fPxMe.XdHW/.x.fhP57DbzWWbja71OSpVHuIf5mEz6G', isEnabled=false, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:08:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@55179740
lut 24, 2020 11:08:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@52316119], {}]
lut 24, 2020 11:08:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:08:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:08:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:08:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='admin', email='vattier', password='{bcrypt}$2a$10$ZUDSOBw111fPxMe.XdHW/.x.fhP57DbzWWbja71OSpVHuIf5mEz6G', isEnabled=true, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:08:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@5ad921ba
lut 24, 2020 11:08:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@5e0d6d4c], {}]
lut 24, 2020 11:08:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:09:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:09:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:09:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='admin', email='vattier', password='admin', isEnabled=true, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:09:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@52939b8f
lut 24, 2020 11:09:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@32c60f8c], {}]
lut 24, 2020 11:09:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:09:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:09:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:09:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='admin', email='vattier', password='admin', isEnabled=true, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:09:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@5e678f2a
lut 24, 2020 11:09:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@79da43ed], {}]
lut 24, 2020 11:09:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:09:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@48331bd], {}]
lut 24, 2020 11:09:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:09:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:09:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:09:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='admin', email='vattier', password='{bcrypt}$2a$10$ZUDSOBw111fPxMe.XdHW/.x.fhP57DbzWWbja71OSpVHuIf5mEz6G', isEnabled=true, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:09:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@1d0179fa
lut 24, 2020 11:09:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@23550687], {}]
lut 24, 2020 11:09:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:09:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:09:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:09:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=1, username='admin', email='vattier', password='{bcrypt}$2a$10$ZUDSOBw111fPxMe.XdHW/.x.fhP57DbzWWbja71OSpVHuIf5mEz6G', isEnabled=true, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:09:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@71560243
lut 24, 2020 11:09:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@7f65093], {}]
lut 24, 2020 11:09:39 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:15:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:15:09 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:15:26 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:15:26 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:15:26 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1becbd94
lut 24, 2020 11:15:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:15:32 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:15:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:15:44 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:16:08 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:16:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:16:08 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@51454b15
lut 24, 2020 11:19:15 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:19:15 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:19:15 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@4e2fe645
lut 24, 2020 11:19:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=false, roles=[]}, null]
lut 24, 2020 11:19:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=true, roles=[]}, ADMIN]
lut 24, 2020 11:19:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			successfully ended
lut 24, 2020 11:19:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			successfully ended
lut 24, 2020 11:29:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=false, roles=[]}, null]
lut 24, 2020 11:29:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=true, roles=[]}, ADMIN]
lut 24, 2020 11:29:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			successfully ended
lut 24, 2020 11:29:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			successfully ended
lut 24, 2020 11:29:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=false, roles=[]}, null]
lut 24, 2020 11:29:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=true, roles=[]}, ADMIN]
lut 24, 2020 11:29:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			successfully ended
lut 24, 2020 11:29:54 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			successfully ended
lut 24, 2020 11:30:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=false, roles=[]}, null]
lut 24, 2020 11:30:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=true, roles=[]}, ADMIN]
lut 24, 2020 11:30:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			successfully ended
lut 24, 2020 11:30:27 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			successfully ended
lut 24, 2020 11:30:37 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:30:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:30:37 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@51fe3fd6
lut 24, 2020 11:30:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=false, roles=[]}, null]
lut 24, 2020 11:30:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin', password='null', isEnabled=true, roles=[]}, ADMIN]
lut 24, 2020 11:30:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Role spring.security.loginandregtemplate.repository.RoleRepository.findByName(String)
			calling with args: [ROLE_CUSTOMER]
lut 24, 2020 11:30:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodRole spring.security.loginandregtemplate.repository.RoleRepository.findByName(String)
			successfully ended
lut 24, 2020 11:30:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.repository.CrudRepository.save(Object)
			calling with args: [User{id=0, username='null', email='admin', password='$2a$10$QX2lCaiFZsWjmdQNSc5wu.xF.svgtnvVA4Ty2Xky23lRfjLlb5LUa', isEnabled=true, roles=[null]}]
lut 24, 2020 11:30:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: javax.validation.ConstraintViolationException: Validation failed for classes [spring.security.loginandregtemplate.model.User] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must be a well-formed email address', propertyPath=email, rootBeanClass=class spring.security.loginandregtemplate.model.User, messageTemplate='{javax.validation.constraints.Email.message}'}
]- MethodObject org.springframework.data.repository.CrudRepository.save(Object)[org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140), org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80), org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:203), org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:78), org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:645), org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282), org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263), org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317), org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:335), org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:292), org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:198), org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:128), org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:192), org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:135), org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:62), org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:108), org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:702), org.hibernate.internal.SessionImpl.persist(SessionImpl.java:688), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:368), com.sun.proxy.$Proxy121.persist(Unknown Source), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:314), com.sun.proxy.$Proxy121.persist(Unknown Source), org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:554), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:371), org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:204), org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:657), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:621), org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:605), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366), org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:178), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy132.save(Unknown Source), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344), org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy132.save(Unknown Source), spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(UserServiceImpl.java:71), spring.security.loginandregtemplate.service.UserServiceImpl$$FastClassBySpringCGLIB$$a6978e76.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.service.UserServiceImpl$$EnhancerBySpringCGLIB$$14ae6719.saveUser(<generated>), spring.security.loginandregtemplate.restController.RegisterController.saveUser(RegisterController.java:56), spring.security.loginandregtemplate.restController.RegisterController$$FastClassBySpringCGLIB$$a3c5d6c2.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.RegisterController$$EnhancerBySpringCGLIB$$62351274.saveUser(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909), javax.servlet.http.HttpServlet.service(HttpServlet.java:660), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 11:30:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			successfully ended
lut 24, 2020 11:30:41 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			successfully ended
lut 24, 2020 11:31:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin@wp.pl', password='null', isEnabled=false, roles=[]}, null]
lut 24, 2020 11:31:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			calling with args: [User{id=0, username='null', email='admin@wp.pl', password='null', isEnabled=true, roles=[]}, ADMIN]
lut 24, 2020 11:31:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Role spring.security.loginandregtemplate.repository.RoleRepository.findByName(String)
			calling with args: [ROLE_CUSTOMER]
lut 24, 2020 11:31:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodRole spring.security.loginandregtemplate.repository.RoleRepository.findByName(String)
			successfully ended
lut 24, 2020 11:31:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Object org.springframework.data.repository.CrudRepository.save(Object)
			calling with args: [User{id=0, username='null', email='admin@wp.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[null]}]
lut 24, 2020 11:31:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodObject org.springframework.data.repository.CrudRepository.save(Object)
			successfully returned Object: User{id=3, username='null', email='admin@wp.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[null]}
lut 24, 2020 11:31:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.service.UserServiceImpl.saveUser(User,String)
			successfully ended
lut 24, 2020 11:31:02 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.RegisterController.saveUser(User,String)
			successfully ended
lut 24, 2020 11:31:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@746a6e3c], {}]
lut 24, 2020 11:31:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:31:26 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:31:26 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:31:31 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:31:31 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:31:53 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:31:53 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:31:53 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3e57fd9
lut 24, 2020 11:32:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:32:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:32:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: org.springframework.dao.IncorrectResultSizeDataAccessException: query did not return a unique result: 2; nested exception is javax.persistence.NonUniqueResultException: query did not return a unique result: 2- MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)[org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:385), org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:257), org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:528), org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61), org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:149), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy132.findUserByUsername(Unknown Source), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344), org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy132.findUserByUsername(Unknown Source), spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(MyUserDetailsService.java:25), spring.security.loginandregtemplate.service.MyUserDetailsService$$FastClassBySpringCGLIB$$42b8783e.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.service.MyUserDetailsService$$EnhancerBySpringCGLIB$$cee36d88.loadUserByUsername(<generated>), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108), org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144), org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175), org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95), org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 11:32:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: org.springframework.dao.IncorrectResultSizeDataAccessException: query did not return a unique result: 2; nested exception is javax.persistence.NonUniqueResultException: query did not return a unique result: 2- MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)[org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:385), org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:257), org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:528), org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61), org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:153), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:149), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy132.findUserByUsername(Unknown Source), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344), org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212), com.sun.proxy.$Proxy132.findUserByUsername(Unknown Source), spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(MyUserDetailsService.java:25), spring.security.loginandregtemplate.service.MyUserDetailsService$$FastClassBySpringCGLIB$$42b8783e.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.service.MyUserDetailsService$$EnhancerBySpringCGLIB$$cee36d88.loadUserByUsername(<generated>), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108), org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144), org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175), org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:195), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:95), org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 11:32:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@afcb46], {}]
lut 24, 2020 11:32:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:32:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:32:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin]
lut 24, 2020 11:32:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=3, username='admin', email='admin@wp.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[Role{id=4, name='ADMIN'}]}]
lut 24, 2020 11:32:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@7c0a7e9a
lut 24, 2020 11:32:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.getHome()
			calling with args: []
lut 24, 2020 11:32:45 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.getHome()
			successfully returned Object: index
lut 24, 2020 11:33:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			calling with args: []
lut 24, 2020 11:33:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			successfully ended
lut 24, 2020 11:34:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:34:01 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin2]
lut 24, 2020 11:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin2]
lut 24, 2020 11:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=4, username='admin2', email='p@p.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[]}]
lut 24, 2020 11:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@518bb598
lut 24, 2020 11:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			calling with args: [SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@3147e250], {}]
lut 24, 2020 11:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login(HttpServletRequest,Model)
			successfully returned Object: login
lut 24, 2020 11:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:34:07 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:34:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method UserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			calling with args: [admin2]
lut 24, 2020 11:34:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Optional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			calling with args: [admin2]
lut 24, 2020 11:34:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodOptional spring.security.loginandregtemplate.repository.UserRepository.findUserByUsername(String)
			successfully returned Object: Optional[User{id=4, username='admin2', email='p@p.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[Role{id=2, name='SECOND'}]}]
lut 24, 2020 11:34:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodUserDetails spring.security.loginandregtemplate.service.MyUserDetailsService.loadUserByUsername(String)
			successfully returned Object: spring.security.loginandregtemplate.model.UserDetailsImpl@6df8fd83
lut 24, 2020 11:34:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.getHome()
			calling with args: []
lut 24, 2020 11:34:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.getHome()
			successfully returned Object: index
lut 24, 2020 11:34:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:34:43 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:34:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			calling with args: []
lut 24, 2020 11:34:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			successfully ended
lut 24, 2020 11:34:53 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			calling with args: []
lut 24, 2020 11:34:53 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			successfully ended
lut 24, 2020 11:35:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			calling with args: []
lut 24, 2020 11:35:10 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			successfully ended
lut 24, 2020 11:35:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			calling with args: []
lut 24, 2020 11:35:14 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			successfully ended
lut 24, 2020 11:43:53 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:43:53 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:43:53 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@128481ef
lut 24, 2020 11:43:59 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.getHome()
			calling with args: []
lut 24, 2020 11:43:59 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.getHome()
			successfully returned Object: index
lut 24, 2020 11:44:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			calling with args: []
lut 24, 2020 11:44:04 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			successfully ended
lut 24, 2020 11:44:18 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.getHome()
			calling with args: []
lut 24, 2020 11:44:18 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.getHome()
			successfully returned Object: index
lut 24, 2020 11:44:33 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			calling with args: []
lut 24, 2020 11:44:33 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.HomeResources.showRoles()
			successfully ended
lut 24, 2020 11:44:49 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:44:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:44:49 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@4c8277d3
lut 24, 2020 11:44:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method String spring.security.loginandregtemplate.controller.HomeController.login()
			calling with args: []
lut 24, 2020 11:44:56 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodString spring.security.loginandregtemplate.controller.HomeController.login()
			successfully returned Object: login
lut 24, 2020 11:51:23 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:51:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:51:24 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3edb71b6
lut 24, 2020 11:51:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.restController.UserController.getAll()
			calling with args: []
lut 24, 2020 11:51:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method List spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			calling with args: []
lut 24, 2020 11:51:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.service.UserServiceImpl.getAllUsers()
			successfully returned Object: [User{id=2, username='piotrek', email='piotrek', password='aaa', isEnabled=false, roles=[]}, User{id=3, username='admin', email='admin@wp.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[Role{id=4, name='ADMIN'}]}, User{id=4, username='admin2', email='p@p.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[Role{id=2, name='SECOND'}]}]
lut 24, 2020 11:51:30 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodList spring.security.loginandregtemplate.restController.UserController.getAll()
			successfully returned Object: [User{id=2, username='piotrek', email='piotrek', password='aaa', isEnabled=false, roles=[]}, User{id=3, username='admin', email='admin@wp.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[Role{id=4, name='ADMIN'}]}, User{id=4, username='admin2', email='p@p.pl', password='$2a$10$UlmXsutHgcm6kNqeHUZ/0OmSpLTu2mj1BTbileznWNMROVZd3oaoq', isEnabled=true, roles=[Role{id=2, name='SECOND'}]}]
lut 24, 2020 11:52:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)
			calling with args: [{id=4, email=admin@wp.pl, enabled=true, userName=admin}, SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@2d56cd9b]]
lut 24, 2020 11:52:25 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: java.lang.NullPointerException- MethodMap spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)[org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:222), org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:212), graphql.parser.Parser.parseDocument(Parser.java:28), graphql.parser.Parser.parseDocument(Parser.java:21), graphql.GraphQL.parse(GraphQL.java:544), graphql.GraphQL.parseAndValidate(GraphQL.java:520), graphql.GraphQL.lambda$parseValidateAndExecute$4(GraphQL.java:509), graphql.execution.preparsed.NoOpPreparsedDocumentProvider.get(NoOpPreparsedDocumentProvider.java:11), graphql.GraphQL.parseValidateAndExecute(GraphQL.java:505), graphql.GraphQL.executeAsync(GraphQL.java:489), graphql.GraphQL.execute(GraphQL.java:420), spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(UserController.java:46), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$e123c7e4.indexFromAnnotated(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909), javax.servlet.http.HttpServlet.service(HttpServlet.java:660), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 11:53:22 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:53:22 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@79cf423d
lut 24, 2020 11:53:26 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method Map spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)
			calling with args: [{id=4, email=admin@wp.pl, enabled=true, userName=admin}, SecurityContextHolderAwareRequestWrapper[ org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequest@2f9a4c3a]]
lut 24, 2020 11:53:26 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterException
WARNING: Exception: java.lang.NullPointerException- MethodMap spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(Map,HttpServletRequest)[org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:222), org.antlr.v4.runtime.CharStreams.fromString(CharStreams.java:212), graphql.parser.Parser.parseDocument(Parser.java:28), graphql.parser.Parser.parseDocument(Parser.java:21), graphql.GraphQL.parse(GraphQL.java:544), graphql.GraphQL.parseAndValidate(GraphQL.java:520), graphql.GraphQL.lambda$parseValidateAndExecute$4(GraphQL.java:509), graphql.execution.preparsed.NoOpPreparsedDocumentProvider.get(NoOpPreparsedDocumentProvider.java:11), graphql.GraphQL.parseValidateAndExecute(GraphQL.java:505), graphql.GraphQL.executeAsync(GraphQL.java:489), graphql.GraphQL.execute(GraphQL.java:420), spring.security.loginandregtemplate.restController.UserController.indexFromAnnotated(UserController.java:48), spring.security.loginandregtemplate.restController.UserController$$FastClassBySpringCGLIB$$c893cb6a.invoke(<generated>), org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93), org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186), org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747), org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689), spring.security.loginandregtemplate.restController.UserController$$EnhancerBySpringCGLIB$$4b829dd0.indexFromAnnotated(<generated>), sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62), sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43), java.lang.reflect.Method.invoke(Method.java:498), org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190), org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138), org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888), org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793), org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87), org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040), org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943), org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006), org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909), javax.servlet.http.HttpServlet.service(HttpServlet.java:660), org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883), javax.servlet.http.HttpServlet.service(HttpServlet.java:741), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92), org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334), org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215), org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178), org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358), org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201), org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119), org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193), org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166), org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202), org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96), org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526), org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139), org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92), org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74), org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343), org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367), org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65), org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860), org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591), org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49), java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), java.lang.Thread.run(Thread.java:745)]
lut 24, 2020 11:58:45 AM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 11:58:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 11:58:46 AM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@f5541ed
lut 24, 2020 12:00:26 PM spring.security.loginandregtemplate.logger.FileLogger <init>
INFO: Logger initialization successful

lut 24, 2020 12:00:27 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method BCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			calling with args: []
lut 24, 2020 12:00:27 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - MethodBCryptPasswordEncoder spring.security.loginandregtemplate.configuration.PasswordEncoder.getPasswordEncoder()
			successfully returned Object: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@e715e9b
lut 24, 2020 12:00:37 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.restController.RegisterController.deleteUser(int)
			calling with args: [2]
lut 24, 2020 12:00:37 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void spring.security.loginandregtemplate.service.UserServiceImpl.deleteUser(Long)
			calling with args: [2]
lut 24, 2020 12:00:37 PM spring.security.loginandregtemplate.logger.FileLogger loggerBeforeAll
INFO: BEFORE - Method void org.springframework.data.repository.CrudRepository.deleteById(Object)
			calling with args: [2]
lut 24, 2020 12:00:37 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid org.springframework.data.repository.CrudRepository.deleteById(Object)
			successfully ended
lut 24, 2020 12:00:37 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.service.UserServiceImpl.deleteUser(Long)
			successfully ended
lut 24, 2020 12:00:37 PM spring.security.loginandregtemplate.logger.FileLogger loggerAfterUser
INFO: AFTER - Methodvoid spring.security.loginandregtemplate.restController.RegisterController.deleteUser(int)
			successfully ended
